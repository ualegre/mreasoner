/* Generated By:JavaCC: Do not edit this line. ConfigsReaderTokenManager.java */
package edu.casetools.mreasoner.io.compiler.configs;
import java.io.FileReader;

import edu.casetools.mreasoner.core.configs.MConfigurations;

/** Token Manager. */
public class ConfigsReaderTokenManager implements ConfigsReaderConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 9);
      case 40:
         return jjStopAtPos(0, 14);
      case 41:
         return jjStopAtPos(0, 15);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         return jjStartNfaWithStates_0(0, 23, 0);
      case 46:
         return jjStopAtPos(0, 16);
      case 47:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 58:
         return jjStopAtPos(0, 18);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0xffffffffe0000000L, 0x1ffL);
      case 62:
         return jjStopAtPos(0, 22);
      case 92:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x5555555540000000L, active1, 0x155L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x8aaa800000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8020000000L, active1, 0x2L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000000000L, active1, 0x80L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x20L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x2280000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x8aaac00000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x1555000000000000L, active1, 0x1L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0xb0040000000L, active1, 0xa4L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000L, active1, 0x100L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000002280000000L, active1, 0x40L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x4500000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x8020000000L, active1, 0x2L);
      case 89:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1555000000000000L, active1, 0x1L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x14a2a0000000L, active1, 0x140L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000204500000000L, active1, 0xa0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x8aaa800000000000L, active1, 0x2L);
      case 88:
         return jjMoveStringLiteralDfa4_0(active0, 0x10840000000L, active1, 0x4L);
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8aaa8a0000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x8020000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x14d40000000L, active1, 0x2L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000400000000000L, active1, 0x160L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x3555000000000000L, active1, 0x5L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x88L);
      case 88:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x2280000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x1555140000000000L, active1, 0x1L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x8aaa800000000000L, active1, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x10040000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000001000000000L, active1, 0x4L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x80L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x40L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000a0000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x8020000000L, active1, 0x110L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x4500000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x8aaa802000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x1555000000000000L, active1, 0x11L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0200000000L, active1, 0x40L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x100L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000004000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x8L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x1480a0000000L, active1, 0x80L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x210040000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x1555004000000000L, active1, 0x3L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x148c20000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x24L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x8aaa800000000000L, active1, 0x90L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x210140000000L, active1, 0x100L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0xa0000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa8_0(active0, 0x2200000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000001000000000L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0x4L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x8aaaaa0200000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x11040000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8020000000L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x3555000000000000L, active1, 0x101L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x400800000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x140000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa9_0(active0, 0x4400000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000002000000000L, active1, 0xb0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x1555542c00000000L, active1, 0x1L);
      case 70:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xa0L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x8020000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x10040000000L, active1, 0x10L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x1080000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x8aaaaa4000000000L, active1, 0x142L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000400000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000005000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x140L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000080000000L, active1, 0xa0L);
      case 74:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000010040000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x4880000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x8aa0100000000L, active1, 0x8L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0x10L);
      case 88:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x1555548220000000L, active1, 0x5L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x8808000800000000L, active1, 0x2L);
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000002000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x402a0300000000L, active1, 0x140L);
      case 74:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xa0L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa12_0(active0, 0x1120000000000000L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x2001000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x11548000000000L, active1, 0x10L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x10440000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(12, 53);
         break;
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x1010001000000000L, active1, 0x5L);
      case 66:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000002000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x200004000000000L, active1, 0xa0L);
      case 70:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x2002548480000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x140L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0x80002a0040000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000020000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0x40800000000000L, active1, 0x10L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0x84000000000000L, active1, 0x2L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0xc00000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x10a00000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L);
      case 89:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(13, 54);
         break;
      case 66:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0x4080000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x8400aa0200000000L, active1, 0x140L);
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x4004010900000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa14_0(active0, 0x548000000000L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa14_0(active0, 0x300000000000000L, active1, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x1800000000000000L, active1, 0x2L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x80001400000000L, active1, 0x8L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L, active1, 0x10L);
      case 86:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xa0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(14, 47);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(14, 55);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(14, 57);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(14, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(14, 65);
         break;
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0xb548420000000L, active1, 0x1L);
      case 70:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000001000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xa0L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000200000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000000L, active1, 0x4L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x100002000000000L, active1, 0x10L);
      case 85:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x2a0000000000L, active1, 0x148L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(15, 29);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(15, 39);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(15, 48);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(15, 56);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(15, 58);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(15, 64);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(15, 66);
         break;
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x300000000L, active1, 0xa0L);
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa16_0(active0, 0x14010040000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000222000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x800001000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x140L);
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000400000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x4080000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x8540000000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(16, 30);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(16, 40);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(16, 49);
         break;
      case 65:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000080400000000L, active1, 0x140L);
      case 67:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10L);
      case 71:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa17_0(active0, 0x444080000000L, active1, 0x8L);
      case 78:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000002000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa17_0(active0, 0x804000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa17_0(active0, 0x220000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x300000000L, active1, 0xa0L);
      case 86:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(17, 50);
         break;
      case 65:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000100000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0xa0L);
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0x300000000L, active1, 0x10L);
      case 76:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000L, active1, 0x8L);
      case 78:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x4080000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa18_0(active0, 0x440000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000c00000000L, active1, 0x140L);
      case 95:
         return jjMoveStringLiteralDfa18_0(active0, 0x221000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(18, 59);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(18, 69);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(18, 71);
         break;
      case 68:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000000L, active1, 0x8L);
      case 72:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x140L);
      case 73:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000220c00000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000L, active1, 0x10L);
      case 78:
         return jjMoveStringLiteralDfa19_0(active0, 0x8004080000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x300000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000001000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0x442000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(19, 31);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(19, 60);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(19, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(19, 72);
         break;
      case 69:
         return jjMoveStringLiteralDfa20_0(active0, 0x8080000000000L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000441000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000300000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000400000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa20_0(active0, 0x222000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(20, 32);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(20, 43);
         break;
      case 69:
         return jjMoveStringLiteralDfa21_0(active0, 0x10320800000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000400000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa21_0(active0, 0x444000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1);
      return 21;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(21, 35);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(21, 44);
         break;
      case 65:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8L);
      case 69:
         return jjMoveStringLiteralDfa22_0(active0, 0x441000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa22_0(active0, 0x8004000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa22_0(active0, 0x2000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10L);
      case 82:
         return jjMoveStringLiteralDfa22_0(active0, 0x10220000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa22_0(active0, 0x2000000400000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1);
      return 22;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(22, 36);
         break;
      case 65:
         return jjMoveStringLiteralDfa23_0(active0, 0x220000000000L, active1, 0x10L);
      case 67:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa23_0(active0, 0x2000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa23_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa23_0(active0, 0x10000200000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa23_0(active0, 0x4000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa23_0(active0, 0x440000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000000L, active1, 0x8L);
      case 95:
         return jjMoveStringLiteralDfa23_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(21, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1);
      return 23;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(23, 37);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(23, 51);
         break;
      case 65:
         return jjMoveStringLiteralDfa24_0(active0, 0x440000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa24_0(active0, 0x10000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa24_0(active0, 0x2000000400000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa24_0(active0, 0x200000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa24_0(active0, 0x220000000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(22, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, active1);
      return 24;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(24, 38);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(24, 52);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(24, 67);
         break;
      case 69:
         return jjMoveStringLiteralDfa25_0(active0, 0x200000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000220000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa25_0(active0, 0x2000000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa25_0(active0, 0x400000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa25_0(active0, 0x440000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, active1);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(23, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, active1);
      return 25;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(25, 33);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(25, 68);
         break;
      case 69:
         return jjMoveStringLiteralDfa26_0(active0, 0x2000000400000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa26_0(active0, 0x440000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa26_0(active0, 0x4000000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa26_0(active0, 0x220000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, active1);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(24, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(26, 34);
         break;
      case 69:
         return jjMoveStringLiteralDfa27_0(active0, 0x4000000000000000L);
      case 78:
         return jjMoveStringLiteralDfa27_0(active0, 0x220000000000L);
      case 79:
         return jjMoveStringLiteralDfa27_0(active0, 0x440000000000L);
      case 95:
         return jjMoveStringLiteralDfa27_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(27, 41);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(27, 45);
         break;
      case 78:
         return jjMoveStringLiteralDfa28_0(active0, 0x440000000000L);
      case 80:
         return jjMoveStringLiteralDfa28_0(active0, 0x2000000000000000L);
      case 95:
         return jjMoveStringLiteralDfa28_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(28, 42);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(28, 46);
         break;
      case 65:
         return jjMoveStringLiteralDfa29_0(active0, 0x2000000000000000L);
      case 80:
         return jjMoveStringLiteralDfa29_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa30_0(active0, 0x4000000000000000L);
      case 84:
         return jjMoveStringLiteralDfa30_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa31_0(active0, 0x2000000000000000L);
      case 84:
         return jjMoveStringLiteralDfa31_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(31, 61);
         break;
      case 72:
         return jjMoveStringLiteralDfa32_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0, 0L);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(32, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(31, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               case 4:
                  if (curChar == 95 && kind > 24)
                     kind = 24;
                  break;
               case 6:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 7:
                  if ((0x7fffffeL & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 9:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x800400000000L & l) != 0L)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x14404410000000L & l) != 0L)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 92:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   1, 2, 9, 10, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\42", null, null, null, 
null, "\50", "\51", "\56", "\54", "\72", "\57", "\134", "\74", "\76", "\55", null, 
null, null, null, null, 
"\74\105\130\105\103\125\124\111\117\116\137\115\117\104\105\76", "\74\57\105\130\105\103\125\124\111\117\116\137\115\117\104\105\76", 
"\74\125\123\105\137\123\124\122\101\124\111\106\111\103\101\124\111\117\116\76", 
"\74\57\125\123\105\137\123\124\122\101\124\111\106\111\103\101\124\111\117\116\76", 
"\74\125\123\105\137\106\111\130\105\104\137\111\124\105\122\101\124\111\117\116\137\124\111\115\105\76", 
"\74\57\125\123\105\137\106\111\130\105\104\137\111\124\105\122\101\124\111\117\116\137\124\111\115\105\76", 
"\74\106\111\130\105\104\137\111\124\105\122\101\124\111\117\116\137\124\111\115\105\76", 
"\74\57\106\111\130\105\104\137\111\124\105\122\101\124\111\117\116\137\124\111\115\105\76", 
"\74\125\123\105\137\115\101\130\137\105\130\105\103\125\124\111\117\116\137\124\111\115\105\76", 
"\74\57\125\123\105\137\115\101\130\137\105\130\105\103\125\124\111\117\116\137\124\111\115\105\76", "\74\105\130\105\103\125\124\111\117\116\137\124\111\115\105\76", 
"\74\57\105\130\105\103\125\124\111\117\116\137\124\111\115\105\76", 
"\74\122\105\114\101\124\111\126\105\137\124\111\115\105\137\111\123\137\111\124\105\122\101\124\111\117\116\76", 
"\74\57\122\105\114\101\124\111\126\105\137\124\111\115\105\137\111\123\137\111\124\105\122\101\124\111\117\116\76", 
"\74\122\105\114\101\124\111\126\105\137\124\111\115\105\137\126\101\114\125\105\76", 
"\74\57\122\105\114\101\124\111\126\105\137\124\111\115\105\137\126\101\114\125\105\76", 
"\74\101\102\123\117\114\125\124\105\137\124\111\115\105\137\111\123\137\111\124\105\122\101\124\111\117\116\76", 
"\74\57\101\102\123\117\114\125\124\105\137\124\111\115\105\137\111\123\137\111\124\105\122\101\124\111\117\116\76", "\74\104\101\124\101\102\101\123\105\137\124\131\120\105\76", 
"\74\57\104\101\124\101\102\101\123\105\137\124\131\120\105\76", "\74\104\101\124\101\102\101\123\105\137\104\122\111\126\105\122\76", 
"\74\57\104\101\124\101\102\101\123\105\137\104\122\111\126\105\122\76", 
"\74\104\101\124\101\102\101\123\105\137\124\101\102\114\105\137\107\105\116\105\122\111\103\76", 
"\74\57\104\101\124\101\102\101\123\105\137\124\101\102\114\105\137\107\105\116\105\122\111\103\76", "\74\104\101\124\101\102\101\123\105\137\111\120\76", 
"\74\57\104\101\124\101\102\101\123\105\137\111\120\76", "\74\104\101\124\101\102\101\123\105\137\120\117\122\124\76", 
"\74\57\104\101\124\101\102\101\123\105\137\120\117\122\124\76", "\74\104\101\124\101\102\101\123\105\137\125\123\105\122\76", 
"\74\57\104\101\124\101\102\101\123\105\137\125\123\105\122\76", "\74\104\101\124\101\102\101\123\105\137\120\101\123\123\127\117\122\104\76", 
"\74\57\104\101\124\101\102\101\123\105\137\120\101\123\123\127\117\122\104\76", 
"\74\123\131\123\124\105\115\137\123\120\105\103\111\106\111\103\101\124\111\117\116\137\106\111\114\105\137\120\101\124\110\76", 
"\74\57\123\131\123\124\105\115\137\123\120\105\103\111\106\111\103\101\124\111\117\116\137\106\111\114\105\137\120\101\124\110\76", "\74\104\101\124\101\102\101\123\105\137\116\101\115\105\76", 
"\74\57\104\101\124\101\102\101\123\105\137\116\101\115\105\76", "\74\105\130\124\105\122\116\101\114\137\112\101\122\123\76", 
"\74\57\105\130\124\105\122\116\101\114\137\112\101\122\123\76", 
"\74\114\106\120\125\102\123\137\117\125\124\120\125\124\137\106\111\114\105\137\120\101\124\110\76", 
"\74\57\114\106\120\125\102\123\137\117\125\124\120\125\124\137\106\111\114\105\137\120\101\124\110\76", "\74\123\105\123\123\111\117\116\137\106\111\114\105\137\120\101\124\110\76", 
"\74\57\123\105\123\123\111\117\116\137\106\111\114\105\137\120\101\124\110\76", "\74\122\105\123\125\114\124\123\137\106\111\114\105\137\120\101\124\110\76", 
"\74\57\122\105\123\125\114\124\123\137\106\111\114\105\137\120\101\124\110\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INSIDE_COMMENT",
   "STRING_STATE",
   "ESC_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 3, 0, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffa01L, 0x1ffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoMore = {
   0x400L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[11];
private final int[] jjstateSet = new int[22];
protected char curChar;
/** Constructor. */
public ConfigsReaderTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ConfigsReaderTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 11; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
